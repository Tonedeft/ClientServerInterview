from flask import Flask, request, jsonify
from flask_bcrypt import Bcrypt
from cryptography.fernet import Fernet
import ssl

app = Flask(__name__)
bcrypt = Bcrypt(app)
fernet_key = Fernet.generate_key()
fernet = Fernet(fernet_key)

# Replace with your actual credentials
username = 'user'
password_hash = bcrypt.generate_password_hash('password').decode('utf-8')

def generate_token(data):
    encrypted_data = fernet.encrypt(data.encode())
    return encrypted_data.decode('utf-8')

def validate_token(token):
    try:
        decrypted_data = fernet.decrypt(token.encode()).decode('utf-8')
        return decrypted_data
    except:
        return None

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    if data['username'] == username and bcrypt.check_password_hash(password_hash, data['password']):
        token = generate_token(data['username'])
        return jsonify({'token': token})
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

@app.route('/log_info', methods=['GET'])
def log_info():
    token = request.headers.get('Authorization')
    if token:
        username = validate_token(token.split(' ')[1])
        if username:
            # Replace with your actual log fetching logic
            log_data = {'message': 'Log information for user: ' + username}
            return jsonify(log_data)
        else:
            return jsonify({'error': 'Invalid token'}), 401
    else:
        return jsonify({'error': 'Token missing'}), 401

# Create a custom SSL context
ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

# Load the CA certificate (generated by gen_ca.sh)
ssl_context.load_cert_chain('cert.pem', 'private.key')

ssl_context.load_verify_locations(cafile='cert.pem')

if __name__ == '__main__':
    app.run(debug=True, ssl_context=ssl_context)